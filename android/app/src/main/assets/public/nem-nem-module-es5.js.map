{"version":3,"sources":["webpack:///src/app/wallets/nem/nem.page.html","webpack:///src/app/wallets/nem/nem-routing.module.ts","webpack:///src/app/wallets/nem/nem.module.ts","webpack:///src/app/wallets/nem/nem.page.scss","webpack:///src/app/wallets/nem/nem.page.ts"],"names":["routes","path","component","NemPageRoutingModule","imports","forChild","exports","NemPageModule","declarations","NemPage","modalCtrl","walletsService","route","isShowChart","isTokenSelected","segmentModel","paramMap","subscribe","params","id","get","nemWallet","getWallet","has","nemToken","getToken","console","log","selectedNemToken","walletName","name","walletType","walletBalance","balance","walletAddress","finalTransactions","getTokenTransaction","transactions","create","modal","present","selector","template"],"mappings":"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","file":"nem-nem-module-es5.js","sourcesContent":["export default \"<ion-header class=\\\"ion-no-border\\\">\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"/tabnav/wallets\\\" text=\\\"\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button color=\\\"light\\\" (click)=\\\"openNodeSelectionModal()\\\">\\n        <ion-icon name=\\\"ellipse\\\" size=\\\"small\\\"></ion-icon>Node\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-title>{{ isTokenSelected ? selectedNemToken.walletName : nemWallet.walletName }} (NEM)</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <app-balance [wallet]=\\\"isTokenSelected ? selectedNemToken : nemWallet\\\"></app-balance>\\n\\n  <ion-segment scrollable [(ngModel)]=\\\"segmentModel\\\">\\n    <ion-segment-button value=\\\"transaction\\\" layout=\\\"icon-start\\\">\\n      <ion-icon name=\\\"list\\\"></ion-icon>\\n      <ion-label>Transaction</ion-label>\\n    </ion-segment-button>\\n    <ion-segment-button value=\\\"chart\\\" layout=\\\"icon-start\\\">\\n      <ion-icon name=\\\"trending-up\\\"></ion-icon>\\n      <ion-label>Chart</ion-label>\\n    </ion-segment-button>\\n  </ion-segment>\\n\\n  <div *ngIf=\\\"finalTransactions && finalTransactions.length >=1; else noTransaction\\\">\\n    <app-chart *ngIf=\\\"segmentModel === 'chart'\\\" [transactionsData]=\\\"finalTransactions\\\"></app-chart>\\n\\n    <app-transaction-list\\n      [transactions]=\\\"finalTransactions\\\"\\n      *ngIf=\\\"segmentModel === 'transaction'\\\"\\n    ></app-transaction-list>\\n  </div>\\n\\n  <ng-template #noTransaction>\\n    <p class=\\\"ion-text-center\\\">No transaction</p>\\n  </ng-template>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { NemPage } from './nem.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NemPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NemPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { NemPageRoutingModule } from './nem-routing.module';\n\nimport { NemPage } from './nem.page';\nimport { BalanceComponent } from '../sharedComponents/balance/balance.component';\nimport { TransactionListComponent } from '../sharedComponents/transaction-list/transaction-list.component';\nimport { ChartComponent } from '../sharedComponents/chart/chart.component';\nimport { TransactionDetailComponent } from '../sharedComponents/transaction-item/transaction-detail/transaction-detail.component';\nimport { TransactionItemComponent } from '../sharedComponents/transaction-item/transaction-item.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, NemPageRoutingModule],\n  declarations: [\n    NemPage,\n    BalanceComponent,\n    ChartComponent,\n    TransactionListComponent,\n    TransactionDetailComponent,\n    TransactionItemComponent,\n  ],\n})\nexport class NemPageModule {}\n","export default \"ion-header {\\n  --background: linear-gradient(to right, rgba(65, 161, 200), rgb(7, 70, 115));\\n}\\nion-header ion-icon {\\n  color: #2fff3d;\\n}\\nion-button {\\n  color: #0a0a0a;\\n  font-size: 13px;\\n  font-weight: bold;\\n}\\nion-segment {\\n  height: 40px;\\n  margin: 0;\\n  border-radius: 0;\\n  --background: linear-gradient(to right, rgba(65, 161, 200), rgb(7, 70, 115));\\n}\\nion-segment ion-segment-button {\\n  --color: #074673;\\n  --border-radius: 20px 20px 0 0;\\n  --background: #f7f7f7;\\n  margin: 0;\\n  --border-width: 1px;\\n  --border-color: #f7f7f7;\\n}\\nion-segment ion-segment-button ion-icon {\\n  --color: #074673;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvd2FsbGV0cy9uZW0vbmVtLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLDRFQUFBO0FBQ0Y7QUFDRTtFQUNFLGNBQUE7QUFDSjtBQUdBO0VBQ0UsY0FBQTtFQUNBLGVBQUE7RUFDQSxpQkFBQTtBQUFGO0FBR0E7RUFDRSxZQUFBO0VBQ0EsU0FBQTtFQUNBLGdCQUFBO0VBQ0EsNEVBQUE7QUFBRjtBQUNFO0VBQ0UsZ0JBQUE7RUFDQSw4QkFBQTtFQUNBLHFCQUFBO0VBQ0EsU0FBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7QUFDSjtBQUFJO0VBQ0UsZ0JBQUE7QUFFTiIsImZpbGUiOiJzcmMvYXBwL3dhbGxldHMvbmVtL25lbS5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24taGVhZGVyIHtcbiAgLS1iYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJnYmEoNjUsIDE2MSwgMjAwKSwgcmdiKDcsIDcwLCAxMTUpKTtcblxuICBpb24taWNvbiB7XG4gICAgY29sb3I6ICMyZmZmM2Q7XG4gIH1cbn1cblxuaW9uLWJ1dHRvbiB7XG4gIGNvbG9yOiAjMGEwYTBhO1xuICBmb250LXNpemU6IDEzcHg7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG5pb24tc2VnbWVudCB7XG4gIGhlaWdodDogNDBweDtcbiAgbWFyZ2luOiAwO1xuICBib3JkZXItcmFkaXVzOiAwO1xuICAtLWJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgcmdiYSg2NSwgMTYxLCAyMDApLCByZ2IoNywgNzAsIDExNSkpO1xuICBpb24tc2VnbWVudC1idXR0b24ge1xuICAgIC0tY29sb3I6ICMwNzQ2NzM7XG4gICAgLS1ib3JkZXItcmFkaXVzOiAyMHB4IDIwcHggMCAwO1xuICAgIC0tYmFja2dyb3VuZDogI2Y3ZjdmNztcbiAgICBtYXJnaW46IDA7XG4gICAgLS1ib3JkZXItd2lkdGg6IDFweDtcbiAgICAtLWJvcmRlci1jb2xvcjogI2Y3ZjdmNztcbiAgICBpb24taWNvbiB7XG4gICAgICAtLWNvbG9yOiAjMDc0NjczO1xuICAgIH1cbiAgfVxufVxuIl19 */\";","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ModalController } from '@ionic/angular';\n\nimport { Wallet } from 'src/app/services/models/wallet.model';\nimport { Transaction } from 'src/app/services/models/transaction.model';\nimport { WalletsService } from 'src/app/services/wallets/wallets.service';\n\nimport { NodeSelectionComponent } from '../node-selection/node-selection.component';\n\ninterface tokenWallet {\n  walletName: string;\n  walletType: string;\n  walletBalance: number[];\n  walletAddress: string;\n}\n\n@Component({\n  selector: 'app-nem',\n  templateUrl: './nem.page.html',\n  styleUrls: ['./nem.page.scss'],\n})\nexport class NemPage implements OnInit {\n  isShowChart = false;\n\n  nemWallet: Wallet;\n  selectedNemToken: tokenWallet; // re-structure the token data (add more info)\n\n  finalTransactions: Transaction[];\n  isTokenSelected = false;\n\n  segmentModel: string;\n\n  constructor(\n    private modalCtrl: ModalController,\n    private walletsService: WalletsService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.segmentModel = 'transaction';\n\n    this.route.paramMap.subscribe((params) => {\n      const id = params.get('id');\n      this.nemWallet = this.walletsService.getWallet(id);\n\n      if (params.has('tokenId')) {\n        this.isTokenSelected = true;\n\n        const nemToken = this.walletsService.getToken(this.nemWallet, params.get('tokenId'));\n\n        console.log('nem token page:', nemToken);\n\n        this.selectedNemToken = {\n          walletName: nemToken.name,\n          walletType: this.nemWallet.walletType,\n          walletBalance: nemToken.balance,\n          walletAddress: this.nemWallet.walletAddress,\n        };\n\n        this.finalTransactions = this.walletsService.getTokenTransaction(this.nemWallet, nemToken.id);\n      } else {\n        this.isTokenSelected = false;\n        this.finalTransactions = this.nemWallet.transactions;\n      }\n    });\n  }\n\n  async openNodeSelectionModal() {\n    const modal = await this.modalCtrl.create({\n      component: NodeSelectionComponent,\n    });\n    return await modal.present();\n  }\n}\n"]}