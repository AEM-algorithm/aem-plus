{"version":3,"sources":["webpack:///src/app/export/confirm-modal/confirm-modal.component.html","webpack:///src/app/export/export.page.html","webpack:///src/app/export/confirm-modal/confirm-modal.component.scss","webpack:///src/app/export/confirm-modal/confirm-modal.component.ts","webpack:///src/app/export/export-routing.module.ts","webpack:///src/app/export/export.module.ts","webpack:///src/app/export/export.page.scss","webpack:///src/app/export/export.page.ts"],"names":["ConfirmModalComponent","modalCtrl","loadingCtrl","helperService","exportSuccess","fromDate","dateFormat","submitData","dateFrom","toDate","dateTo","audAmount","dismiss","create","message","spinner","cssClass","then","loadEl","present","setTimeout","close","showLoading","selector","template","routes","path","component","ExportPageRoutingModule","imports","forChild","exports","ExportPageModule","declarations","ExportPage","alterCtrl","walletsService","purchaseFee","walletsToExportSelected","isExportUnlocked","wallets","getSameTypeWallets","exportForm","required","walletType","walletsExport","e","type","detail","value","get","setValue","walletsToExport","exportFormData","Date","exportFee","header","buttons","text","role","handler","duration","loadingEl","alterEl","componentProps","modalEl","console","log"],"mappings":"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","file":"export-export-module-es5.js","sourcesContent":["export default \"<ion-content>\\n  <!-- <h6>Confirm transaction</h5> -->\\n\\n  <ion-list lines=\\\"none\\\">\\n    <ion-list-header>\\n      <ion-label>Confirm transaction</ion-label>\\n    </ion-list-header>\\n    <ion-item>\\n      <ion-label>\\n        <h6>From</h6>\\n        <ion-text>{{ fromDate }}</ion-text>\\n      </ion-label>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>\\n        <h6>To</h6>\\n        <ion-text>{{ toDate }}</ion-text>\\n      </ion-label>\\n    </ion-item>\\n  </ion-list>\\n  <p>Needs redefine???? or remove</p>\\n  <p>this is for confirming the export info not for purchasing the export function</p>\\n</ion-content>\\n<ion-footer>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button class=\\\"ion-margin-right\\\" (click)=\\\"close()\\\">Cancel</ion-button>\\n      <ion-button (click)=\\\"confirm()\\\">Confirm</ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-footer>\\n\";","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Export</ion-title>\\n  </ion-toolbar>\\n  <div class=\\\"decription ion-text-center\\\">\\n    <span>\\n      ???some basic info for user (how much to cost for unlocking the export, what user can do once unlock the export)\\n    </span>\\n  </div>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding-top\\\">\\n  <form [formGroup]=\\\"exportForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <h5 class=\\\"title\\\">From</h5>\\n    <ion-item lines=\\\"none\\\">\\n      <ion-datetime\\n        slot=\\\"end\\\"\\n        max=\\\"2022-12-31\\\"\\n        value=\\\"2019-10-01T15:43:40.394Z\\\"\\n        displayFormat=\\\"D/MM/YYYY\\\"\\n        formControlName=\\\"dateFrom\\\"\\n      ></ion-datetime>\\n    </ion-item>\\n\\n    <h5 class=\\\"title\\\">To</h5>\\n    <ion-item lines=\\\"none\\\" class=\\\"input-shadow\\\">\\n      <ion-datetime\\n        slot=\\\"end\\\"\\n        max=\\\"2022-12-31\\\"\\n        value=\\\"2019-10-01T15:43:40.394Z\\\"\\n        displayFormat=\\\"D/MM/YYYY\\\"\\n        formControlName=\\\"dateTo\\\"\\n      ></ion-datetime>\\n    </ion-item>\\n\\n    <h5 class=\\\"title\\\">Cryptocurrency type</h5>\\n    <ion-item lines=\\\"none\\\" class=\\\"input-shadow\\\">\\n      <ion-select slot=\\\"end\\\" formControlName=\\\"walletType\\\" (ionChange)=\\\"onSelectType($event)\\\">\\n        <ion-select-option value=\\\"BTC\\\">BTC</ion-select-option>\\n        <ion-select-option value=\\\"NEM\\\">XEM</ion-select-option>\\n        <ion-select-option value=\\\"ETH\\\">ETH</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n\\n    <h5 class=\\\"title\\\">Wallets</h5>\\n    <ion-item lines=\\\"none\\\" class=\\\"input-shadow\\\">\\n      <ion-select\\n        slot=\\\"end\\\"\\n        multiple=\\\"true\\\"\\n        formControlName=\\\"walletsExport\\\"\\n        (ionChange)=\\\"onSelectExportWallets($event)\\\"\\n      >\\n        <ion-select-option *ngFor=\\\"let wallet of wallets\\\" [value]=\\\"wallet.walletId\\\">\\n          {{wallet.walletName}}\\n        </ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n\\n    <div class=\\\"btn-div\\\">\\n      <!--   if user's export function unlocked:  make purchase-->\\n      <ion-button\\n        *ngIf=\\\"!isExportUnlocked; else exportTrans\\\"\\n        class=\\\"btn-gradient-bg\\\"\\n        type=\\\"submit\\\"\\n        expand=\\\"block\\\"\\n        type=\\\"submit\\\"\\n      >\\n        Unlock Export\\n      </ion-button>\\n      <!--    if user's export function locked:  select transactions export file formate-->\\n      <ng-template #exportTrans>\\n        <ion-button\\n          class=\\\"btn-gradient-bg\\\"\\n          [disabled]=\\\"exportForm.invalid\\\"\\n          type=\\\"button\\\"\\n          expand=\\\"block\\\"\\n          (click)=\\\"exportCSV()\\\"\\n        >\\n          Export as CSV\\n        </ion-button>\\n\\n        <ion-button\\n          class=\\\"btn-gradient-bg\\\"\\n          [disabled]=\\\"exportForm.invalid\\\"\\n          type=\\\"button\\\"\\n          expand=\\\"block\\\"\\n          (click)=\\\"exportExcel()\\\"\\n        >\\n          Export as Excel\\n        </ion-button>\\n      </ng-template>\\n    </div>\\n  </form>\\n</ion-content>\\n\";","export default \"ion-list-header ion-label {\\n  margin-top: 20px;\\n  --color: #074673;\\n  font-size: 20px;\\n}\\n\\nion-item h6 {\\n  color: #216e9a;\\n  font-size: 12px;\\n  font-weight: bold;\\n  font-family: Roboto;\\n}\\n\\nion-item p {\\n  color: #000000de;\\n  font-size: 16px;\\n  font-family: Roboto;\\n}\\n\\nion-footer ion-button {\\n  color: #074673;\\n  font-size: 14px;\\n}\\n\\nion-note {\\n  --color: #9f9f9f;\\n  font-size: 11px;\\n  font-family: Roboto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZXhwb3J0L2NvbmZpcm0tbW9kYWwvY29uZmlybS1tb2RhbC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDRTtFQUNFLGdCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxlQUFBO0FBQUo7O0FBS0U7RUFDRSxjQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0VBQ0EsbUJBQUE7QUFGSjs7QUFJRTtFQUNFLGdCQUFBO0VBQ0EsZUFBQTtFQUNBLG1CQUFBO0FBRko7O0FBT0U7RUFDRSxjQUFBO0VBQ0EsZUFBQTtBQUpKOztBQVFBO0VBQ0UsZ0JBQUE7RUFDQSxlQUFBO0VBQ0EsbUJBQUE7QUFMRiIsImZpbGUiOiJzcmMvYXBwL2V4cG9ydC9jb25maXJtLW1vZGFsL2NvbmZpcm0tbW9kYWwuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tbGlzdC1oZWFkZXIge1xuICBpb24tbGFiZWwge1xuICAgIG1hcmdpbi10b3A6IDIwcHg7XG4gICAgLS1jb2xvcjogIzA3NDY3MztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gIH1cbn1cblxuaW9uLWl0ZW0ge1xuICBoNiB7XG4gICAgY29sb3I6ICMyMTZlOWE7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtZmFtaWx5OiBSb2JvdG87XG4gIH1cbiAgcCB7XG4gICAgY29sb3I6ICMwMDAwMDBkZTtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgZm9udC1mYW1pbHk6IFJvYm90bztcbiAgfVxufVxuXG5pb24tZm9vdGVyIHtcbiAgaW9uLWJ1dHRvbiB7XG4gICAgY29sb3I6ICMwNzQ2NzM7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICB9XG59XG5cbmlvbi1ub3RlIHtcbiAgLS1jb2xvcjogIzlmOWY5ZjtcbiAgZm9udC1zaXplOiAxMXB4O1xuICBmb250LWZhbWlseTogUm9ib3RvO1xufVxuIl19 */\";","import { Component, Input, OnInit } from '@angular/core';\nimport { AlertController, LoadingController, ModalController, ToastController } from '@ionic/angular';\nimport { HelperFunService } from 'src/app/services/helper/helper-fun.service';\n\n@Component({\n  selector: 'app-confirm-modal',\n  templateUrl: './confirm-modal.component.html',\n  styleUrls: ['./confirm-modal.component.scss'],\n})\nexport class ConfirmModalComponent implements OnInit {\n  @Input() submitData;\n\n  fromDate: string;\n  toDate: string;\n  // walletToPayType: string;\n  audAmount: number;\n\n  constructor(\n    private modalCtrl: ModalController,\n    private loadingCtrl: LoadingController,\n    private helperService: HelperFunService\n  ) {}\n\n  exportSuccess = false;\n\n  ngOnInit() {\n    // console.log(this.submitData);\n    this.fromDate = this.helperService.dateFormat(this.submitData.dateFrom);\n    this.toDate = this.helperService.dateFormat(this.submitData.dateTo);\n    // this.walletToPayType = this.submitData.paymentWallet.walletType;\n\n    //=====TODO: convert the cryptocurrency value to aud value. backend??\n    this.audAmount = 2.22;\n  }\n\n  close() {\n    this.modalCtrl.dismiss();\n  }\n\n  async showLoading() {\n    this.loadingCtrl\n      .create({\n        message: 'Please wait for transfer complete',\n        spinner: 'circular',\n        cssClass: 'transfer-loading',\n        // duration: 2000,\n      })\n      .then((loadEl) => {\n        loadEl.present();\n        // fake the request:\n        setTimeout(() => {\n          loadEl.dismiss();\n          // TODO: the different format files:\n          //       then the social sharing\n        }, 2000);\n      });\n  }\n\n  confirm() {\n    // console.log('confirm....');\n    this.close();\n    this.showLoading();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ExportPage } from './export.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ExportPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ExportPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { ExportPageRoutingModule } from './export-routing.module';\n\nimport { ExportPage } from './export.page';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, IonicModule, ExportPageRoutingModule],\n  declarations: [ExportPage],\n})\nexport class ExportPageModule {}\n","export default \"form {\\n  padding: 0 20px;\\n}\\n\\n.title {\\n  font-size: 14px;\\n  color: #074673;\\n  font-weight: bold;\\n}\\n\\nion-item {\\n  box-shadow: 0px 3px 6px #00000029;\\n  border-radius: 8px;\\n}\\n\\nion-item ion-datetime,\\nion-item ion-select {\\n  --placeholder-color: #000000de;\\n  font-size: 14px;\\n  font-family: Roboto;\\n}\\n\\n.fee-info {\\n  color: #41a1c8;\\n  font-size: 12px;\\n}\\n\\nion-select.in-item {\\n  max-width: 100%;\\n}\\n\\n.btn-div {\\n  margin: 20px 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZXhwb3J0L2V4cG9ydC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxlQUFBO0FBQ0Y7O0FBRUE7RUFDRSxlQUFBO0VBQ0EsY0FBQTtFQUNBLGlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxpQ0FBQTtFQUNBLGtCQUFBO0FBQ0Y7O0FBQ0U7O0VBRUUsOEJBQUE7RUFDQSxlQUFBO0VBQ0EsbUJBQUE7QUFDSjs7QUFHQTtFQUNFLGNBQUE7RUFDQSxlQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0FBQUY7O0FBR0E7RUFDRSxjQUFBO0FBQUYiLCJmaWxlIjoic3JjL2FwcC9leHBvcnQvZXhwb3J0LnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImZvcm0ge1xuICBwYWRkaW5nOiAwIDIwcHg7XG59XG5cbi50aXRsZSB7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgY29sb3I6ICMwNzQ2NzM7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG5pb24taXRlbSB7XG4gIGJveC1zaGFkb3c6IDBweCAzcHggNnB4ICMwMDAwMDAyOTtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuXG4gIGlvbi1kYXRldGltZSxcbiAgaW9uLXNlbGVjdCB7XG4gICAgLS1wbGFjZWhvbGRlci1jb2xvcjogIzAwMDAwMGRlO1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBmb250LWZhbWlseTogUm9ib3RvO1xuICB9XG59XG5cbi5mZWUtaW5mbyB7XG4gIGNvbG9yOiAjNDFhMWM4O1xuICBmb250LXNpemU6IDEycHg7XG59XG5cbmlvbi1zZWxlY3QuaW4taXRlbSB7XG4gIG1heC13aWR0aDogMTAwJTtcbn1cblxuLmJ0bi1kaXYge1xuICBtYXJnaW46IDIwcHggMDtcbn1cbiJdfQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\nimport { AlertController, LoadingController, ModalController } from '@ionic/angular';\n\nimport { Wallet } from '../services/models/wallet.model';\nimport { WalletsService } from '../services/wallets/wallets.service';\nimport { ConfirmModalComponent } from './confirm-modal/confirm-modal.component';\n\n@Component({\n  selector: 'app-export',\n  templateUrl: './export.page.html',\n  styleUrls: ['./export.page.scss'],\n})\nexport class ExportPage implements OnInit {\n  exportForm: FormGroup;\n\n  type: string; // selected export wallet type\n  purchaseFee: number = 12; // unlock export fee: hardcode now\n  wallets: Wallet[]; // wallets of the selected type that the user has\n  walletsToExport: Wallet[]; // selected wallets from walllets\n\n  exportFormData: {\n    dateFrom: Date;\n    dateTo: Date;\n    walletType: string;\n    walletsExport: Wallet[];\n    exportFee: number;\n  };\n\n  walletsToExportSelected = false;\n\n  // TODO: after add in app purchase\n  //       set it to true, if user unlock the export function\n  //       change the confirm modal info without the purchase fee\n  isExportUnlocked = false; // -------  needs to store server-side under this user.\n  // isExportUnlocked = true; // testing\n\n  constructor(\n    private alterCtrl: AlertController,\n    private modalCtrl: ModalController,\n    private walletsService: WalletsService,\n    private loadingCtrl: LoadingController\n  ) {}\n\n  ionViewWillEnter() {}\n\n  ngOnInit() {\n    this.wallets = this.walletsService.getSameTypeWallets('BTC');\n\n    this.exportForm = new FormGroup({\n      dateFrom: new FormControl(null, [Validators.required]),\n      dateTo: new FormControl(null, [Validators.required]),\n      walletType: new FormControl('BTC', [Validators.required]),\n      walletsExport: new FormControl(null, [Validators.required]), // can selecet multiple wallet\n    });\n  }\n\n  onSelectType(e: any) {\n    const type = e.detail.value;\n    //  ---- get the selected type wallets of this users possessed\n    this.wallets = this.walletsService.getSameTypeWallets(type);\n    //  ---- empty the walletExport every time user select the type\n    this.exportForm.get('walletsExport').setValue(null);\n  }\n\n  onSelectExportWallets(e: any) {\n    this.walletsToExport = e.detail.value;\n    this.walletsToExportSelected = true;\n  }\n\n  onSubmit() {\n    const type = this.exportForm.get('walletType').value;\n\n    this.exportFormData = {\n      dateFrom: new Date(this.exportForm.get('dateFrom').value),\n      dateTo: new Date(this.exportForm.get('dateTo').value),\n      walletType: type,\n      walletsExport: this.walletsToExport,\n      exportFee: this.purchaseFee,\n    };\n\n    // ---- if the user didn't unlock export function show this alter window\n    if (!this.isExportUnlocked) {\n      this.alterCtrl\n        .create({\n          header: 'Confirm your In-App purchase',\n          message: `info about the export fee??????`,\n          cssClass: 'purchase-alter',\n          buttons: [\n            {\n              text: 'Cancel',\n              role: 'cancel',\n            },\n            {\n              text: 'Buy',\n              role: 'confirm',\n              handler: () => {\n                // console.log('confirm the purchase of wallet export function');\n                // -------  TODO: show the in-app purchase first (3rd package) instead of this loading\n                this.loadingCtrl\n                  .create({\n                    message: 'purchasing, unlock the export',\n                    spinner: 'circles',\n                    duration: 2000,\n                  })\n                  .then((loadingEl) => {\n                    loadingEl.present();\n                    this.isExportUnlocked = true;\n                  });\n              },\n            },\n          ],\n        })\n        .then((alterEl) => {\n          alterEl.present();\n        });\n    } else {\n      //  ----- if the user purchased the export producte:\n      //          show the export info confirm modal\n      this.modalCtrl\n        .create({\n          component: ConfirmModalComponent,\n          componentProps: {\n            submitData: this.exportFormData,\n          },\n          cssClass: 'center-small-modal',\n        })\n        .then((modalEl) => {\n          modalEl.present();\n        });\n    }\n    // console.log('after submit:', this.exportForm.value);\n    // this.exportForm.reset(); // after the export transaction made then reset the form???\n  }\n\n  exportExcel() {\n    console.log('export as pdf.....');\n    // this.exportForm.reset();\n  }\n\n  exportCSV() {\n    console.log('export as csv.....');\n    // this.exportForm.reset();\n  }\n}\n"]}